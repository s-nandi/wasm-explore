// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod component {
  pub mod library1 {
    
    #[allow(clippy::all)]
    pub mod greeter {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub struct Greeting {
        pub text: wit_bindgen::rt::string::String,
        pub times: wit_bindgen::rt::vec::Vec::<u32>,
      }
      impl ::core::fmt::Debug for Greeting {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Greeting").field("text", &self.text).field("times", &self.times).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn hello_world() -> Greeting{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 16]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:library1/greeter")]
          extern "C" {
            #[link_name = "hello-world"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let len3 = l2 as usize;
          let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
          let l4 = *((ptr0 + 8) as *const i32);
          let l5 = *((ptr0 + 12) as *const i32);
          let len6 = l5 as usize;
          Greeting{
            text: wit_bindgen::rt::string_lift(bytes3),
            times: Vec::from_raw_parts(l4 as *mut _, len6, len6),
          }
        }
      }
      
    }
    
  }
  pub mod library2 {
    
    #[allow(clippy::all)]
    pub mod generator {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Path{
        handle: wit_bindgen::rt::Resource<Path>,
      }
      
      impl Path{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Path{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "component:library2/generator")]
            extern "C" {
              #[link_name = "[resource-drop]path"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Path {
        #[allow(unused_unsafe, clippy::all)]
        pub fn name(&self,) -> wit_bindgen::rt::string::String{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "component:library2/generator")]
            extern "C" {
              #[link_name = "[method]path.name"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *((ptr0 + 0) as *const i32);
            let l2 = *((ptr0 + 4) as *const i32);
            let len3 = l2 as usize;
            let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
            wit_bindgen::rt::string_lift(bytes3)
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn generate() -> i32{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:library2/generator")]
          extern "C" {
            #[link_name = "generate"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          ret
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn generate_many() -> wit_bindgen::rt::vec::Vec::<i32>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:library2/generator")]
          extern "C" {
            #[link_name = "generate-many"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let len3 = l2 as usize;
          Vec::from_raw_parts(l1 as *mut _, len3, len3)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn generate_paths() -> wit_bindgen::rt::vec::Vec::<Path>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:library2/generator")]
          extern "C" {
            #[link_name = "generate-paths"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let base4 = l1;
          let len4 = l2;
          let mut result4 = Vec::with_capacity(len4 as usize);
          for i in 0..len4 {
            let base = base4 + i * 4;
            let e4 = {
              let l3 = *((base + 0) as *const i32);
              
              Path::from_handle(l3 as u32)
            };
            result4.push(e4);
          }
          wit_bindgen::rt::dealloc(base4, (len4 as usize) * 4, 4);
          result4
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 401] = [3, 0, 7, 101, 120, 97, 109, 112, 108, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 147, 2, 1, 65, 2, 1, 65, 4, 1, 66, 5, 1, 112, 121, 1, 114, 2, 4, 116, 101, 120, 116, 115, 5, 116, 105, 109, 101, 115, 0, 4, 0, 8, 103, 114, 101, 101, 116, 105, 110, 103, 3, 0, 1, 1, 64, 0, 0, 2, 4, 0, 11, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 1, 3, 3, 1, 26, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 108, 105, 98, 114, 97, 114, 121, 49, 47, 103, 114, 101, 101, 116, 101, 114, 5, 0, 1, 66, 13, 4, 0, 4, 112, 97, 116, 104, 3, 1, 1, 104, 0, 1, 64, 1, 4, 115, 101, 108, 102, 1, 0, 115, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 112, 97, 116, 104, 46, 110, 97, 109, 101, 1, 2, 1, 64, 0, 0, 122, 4, 0, 8, 103, 101, 110, 101, 114, 97, 116, 101, 1, 3, 1, 112, 122, 1, 64, 0, 0, 4, 4, 0, 13, 103, 101, 110, 101, 114, 97, 116, 101, 45, 109, 97, 110, 121, 1, 5, 1, 105, 0, 1, 112, 6, 1, 64, 0, 0, 7, 4, 0, 14, 103, 101, 110, 101, 114, 97, 116, 101, 45, 112, 97, 116, 104, 115, 1, 8, 3, 1, 28, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 108, 105, 98, 114, 97, 114, 121, 50, 47, 103, 101, 110, 101, 114, 97, 116, 111, 114, 5, 1, 4, 1, 21, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 97, 112, 112, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
